/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private int curCnt = 1;// Keeps track of the current frequency of the current value
    private int maxCnt = 1;// Stores the maximum frequency found so far
    private TreeNode preNode = null;
    //find the most frequently occurred element
    public int[] findMode(TreeNode root) {
        List<Integer> maxCntNums = new ArrayList<>();
        inOrder(root, maxCntNums);
        int[] ret = new int[maxCntNums.size()];
        int idx = 0;
        for(int num:maxCntNums){
            ret[idx++] = num;// Copy the results from the list to the array
        }
        return ret;// Return the array containing the modes
    }

    private void inOrder(TreeNode node, List<Integer>nums){
        if(node == null){
            return;
        }

        //（1） Recursively visit the left subtree
        inOrder(node.left, nums);
        //判断当前node是否和前一个node相同，是的话当前node的frequency +1； 不是的话，当前node的frequency为1
        if(preNode != null){
            if(preNode.val == node.val){
                curCnt ++;
            }else{
                curCnt = 1;
            }
        }
        //再判断是否需要储存当前node，
        //如果他的frequency> maxCnt，那么就需要更新最大的频率，然后把之前储存的node清空，把现在的储存进去
        //如果是等于maxCnt，那么需要把这个node加进去列表里面 
        if(curCnt > maxCnt){
            maxCnt = curCnt;
            nums.clear();
            nums.add(node.val);
        }else if(curCnt == maxCnt){
            nums.add(node.val);
        }

        // （2） Move the preNode pointer to the current node
        preNode = node;

        // （3） Recursively visit the left subtree
        inOrder(node.right, nums);
    }
}
